// service/bot/handlers/callback.ts
import { Bot } from "@grammy";
import luminous from "@vseplet/luminous";
import { getString } from "$strings";
import { db } from "$db";
import { mainKeyboard } from "../keyboards/main.ts";
import { importOptionsKeyboard } from "../keyboards/import.ts";
import { config } from "$shared";
import { createAIProvider } from "../../services/ai/factory.ts";
import { SupportedLanguage } from "$constants";

const logger = new luminous.Logger(
  new luminous.OptionsBuilder().setName("callback").build(),
);

// Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback_query_id
// –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
const processedCallbackIds = new Set<string>();
const MAX_PROCESSED_IDS = 100;

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
function addProcessedId(id: string) {
  processedCallbackIds.add(id);

  // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π ID
  if (processedCallbackIds.size > MAX_PROCESSED_IDS) {
    const firstId = processedCallbackIds.values().next().value;
    processedCallbackIds.delete(firstId);
  }
}

export function bindCallbackHandlers(bot: Bot) {
  // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
  bot.callbackQuery(/^lang_(.+)$/, async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(`–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (—è–∑—ã–∫): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
      await ctx.answerCallbackQuery();
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    const selectedLang = ctx.match![1] as SupportedLanguage;
    const userId = ctx.from!.id;

    try {
      const [updatedUser, err] = await db.user.updateUserLanguage(
        userId,
        selectedLang,
      );

      if (err) {
        logger.err(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: ${err.message}`);
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞");
        return;
      }

      await ctx.editMessageText(getString(selectedLang, "LANG_SELECTED"));
      await ctx.reply(getString(selectedLang, "ADD_WORDS_INSTRUCTION"), {
        reply_markup: importOptionsKeyboard(),
      });

      await ctx.answerCallbackQuery();
    } catch (e) {
      logger.err(`–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: ${(e as Error).message}`);
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞");
    }
  });

  // –ò–º–ø–æ—Ä—Ç —Å–ø–æ—Å–æ–±–æ–≤
  bot.callbackQuery("import_text", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(
        `–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (import_text): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`,
      );
      await ctx.answerCallbackQuery();
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    await ctx.reply(
      "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ|–ø–∏–Ω—å–∏–Ω—å|–∏–µ—Ä–æ–≥–ª–∏—Ñ|–ø–µ—Ä–µ–≤–æ–¥",
    );
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery("import_csv", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(
        `–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (import_csv): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`,
      );
      await ctx.answerCallbackQuery();
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    await ctx.reply("üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.");
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery("import_gsheet", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(
        `–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (import_gsheet): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`,
      );
      await ctx.answerCallbackQuery();
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    await ctx.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets.");
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery("import_notion", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(
        `–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (import_notion): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`,
      );
      await ctx.answerCallbackQuery();
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    await ctx.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑—É Notion.");
    await ctx.answerCallbackQuery();
  });

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  bot.callbackQuery("get_task", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const callbackId = ctx.callbackQuery.id;
    if (processedCallbackIds.has(callbackId)) {
      logger.dbg(
        `–î—É–±–ª–∏–∫–∞—Ç callback –∑–∞–ø—Ä–æ—Å–∞ (get_task): ${callbackId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`,
      );
      await ctx.answerCallbackQuery();
      return;
    }

    logger.inf(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–¥–∞–Ω–∏—è, ID: ${callbackId}`);

    // –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    addProcessedId(callbackId);

    const userId = ctx.from!.id;

    try {
      // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
      await ctx.answerCallbackQuery();

      const [user] = await db.user.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const lang = user.language as SupportedLanguage ?? "en";
      const wordCount = await db.word.getUserWordCount(user.id);

      if (wordCount === 0) {
        await ctx.reply(getString(lang, "NO_WORDS_ERROR"));
        return;
      }

      const words = await db.word.getLeastUsedWords(
        user.id,
        config.data.features.tasks.defaultWordCount,
      );

      try {
        const aiProvider = createAIProvider();
        logger.inf(
          `–ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –∏—Å–ø–æ–ª—å–∑—É—è DeepSeek`,
        );
        const sentences = await aiProvider.generateSentences(words, lang);
        logger.inf(`–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: ${sentences.length}`);

        if (sentences.length === 0) {
          throw new Error("No sentences generated");
        }

        const wordIds = words.map((w) => w.id);
        await db.word.updateWordsUsage(user.id, wordIds);
        logger.dbg(
          `–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è ${wordIds.length} —Å–ª–æ–≤`,
        );

        const taskMessage = [
          getString(lang, "TASK_PROMPT"),
          "",
          ...sentences.map((s, i) => `${i + 1}. ${s}`),
        ].join("\n");

        await ctx.reply(taskMessage, {
          reply_markup: mainKeyboard(lang),
        });
        logger.inf(`–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      } catch (error) {
        logger.err(`–û—à–∏–±–∫–∞ —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: ${(error as Error).message}`);
        await ctx.reply(getString(lang, "TASK_GENERATION_ERROR"), {
          reply_markup: mainKeyboard(lang),
        });
      }
    } catch (e) {
      logger.err(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: ${(e as Error).message}`);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è");
    }
  });
}
