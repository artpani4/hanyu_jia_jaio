// service/main.ts
import { app, bot, config } from "$shared";
import luminous from "@vseplet/luminous";
import { webhookRoutes } from "./api/webhook.ts";

const logger = new luminous.Logger(
  new luminous.OptionsBuilder().setName("main").build(),
);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.route("/", webhookRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.onError((err, c) => {
  logger.err(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err}`);
  return c.text("Internal Server Error", 500);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    // const webhookUrl = config.env.WEBHOOK_URL;
    // await bot.api.setWebhook(webhookUrl);
    // logger.inf(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const port = 8000;
    logger.inf(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);

    Deno.serve({ port }, app.fetch);
  } catch (error) {
    logger.err(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error}`);
    Deno.exit(1);
  }
}

start();
